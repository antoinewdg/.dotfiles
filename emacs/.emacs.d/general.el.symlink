; -*- mode: Emacs-Lisp;-*-

;;; Code:

;; Git
(use-package magit
  :bind (:map magit-mode-map ("SPC" . nil)
	 :map magit-stash-mode-map ("SPC" . nil)
	 :map magit-status-mode-map ("SPC" . nil)
         :map magit-log-mode-map ("SPC" . nil)))

(use-package git-gutter
  :config
  (global-git-gutter-mode +1))


;; Vim mode
(use-package evil
  :config
  (evil-mode 1)
  :bind (:map evil-motion-state-map
	      ("SPC" . nil)))

(use-package evil-commentary
  :config
  (evil-commentary-mode))

(use-package evil-magit)



;; Navigation
(use-package helm
  :init
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-candidate-number-list 50)
  (setq helm-always-two-windows nil)
  (setq helm-default-display-buffer-functions '(display-buffer-in-side-window)))

(use-package helm-rg)

(use-package projectile
  :init
  :config
  (projectile-mode +1)
  ;; (projectile-add-known-project "~/projects/cahier-rdv-v2/backend")
  ;; (projectile-add-known-project "~/projects/cahier-rdv-v2/frontend")
  (setq projectile-project-search-path '("~/projects/" "~/work/" "~/.dotfiles")))

(use-package helm-projectile)



;; IDE
(use-package flycheck
  :init (global-flycheck-mode)
  :config
  (setq flycheck-python-pycompile-executable "python3.7")
  (setq flycheck-python-pylint-executable "python3.7"))

(use-package flycheck-pos-tip
  :init (flycheck-pos-tip-mode))

(use-package company
  :config
  (global-company-mode)
  :bind (:map company-active-map
	      ("C-n" . 'company-select-next-or-abort)
	      ("C-p" . 'company-select-previous-or-abort)
	      ("<tab>" . 'company-complete-selection)
	      ("<return>" . nil))
  :init
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  (setq company-selection-wrap-around t))



;; Appearance
(use-package gruvbox-theme
  :config
  (load-theme 'gruvbox t))

(use-package smart-mode-line
  :config
  (smart-mode-line-enable))



;; Generic
(use-package dockerfile-mode
  :mode ("Dockerfile\\'" . dockerfile-mode))

(use-package yaml-mode
  :mode ("\\.yml\\'" . yaml-mode))

(use-package markdown-mode
  :mode (("README\\.md\\'" . markdown-mode)))



;; Keybinding
(use-package which-key
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))

(use-package general
  :config
  (general-define-key
    :states '(motion normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    ;; "/"   '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
    "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
    "SPC" '(helm-M-x :which-key "M-x")
    "pf"  '(helm-find-file :which-key "find files")
    "ps"  '(helm-projectile-switch-project :which-key "switch project")
    ;; Buffers
    "bb"  '(helm-buffers-list :which-key "buffers list")
    "bn"  '(helm-find-files :which-key "new file")
    "bm"  '(rename-file-and-buffer :which-key "move current file")
    ;; Files
    "ff"  '(helm-projectile-find-file :which-key "find file")
    "fg"  '(helm-rg :which-key "RG")
    ;; Window
    "wl"  '(windmove-right :which-key "move right")
    "wh"  '(windmove-left :which-key "move left")
    "wk"  '(windmove-up :which-key "move up")
    "wj"  '(windmove-down :which-key "move bottom")
    "wn"  '(split-window-right :which-key "split right")
    "wd"  '(delete-window :which-key "delete window")
    ;; Git
    "gs"  '(magit-status :which-key "git status")
    "gl"  '(magit-log-all-branches :which-key "git log")
    ;; Others
    "at"  '(ansi-term :which-key "open terminal")
    "ec"  '(lambda () (interactive) (find-file "~/.dotfiles/emacs/.emacs.d/init.el.symlink")))

  (general-define-key
   :states 'normal
   :keymaps 'python-mode-map
    :prefix "SPC"
   "bf"  '(elpy-format-code :which-key "format buffer"))

  (general-define-key
    :states 'normal
    "C-P" '(helm-projectile-find-file :which-key "find file"))
  (general-define-key
    :states 'normal
    "]c" '(git-gutter:next-hunk :which-key "next hunk")
    "[c" '(git-gutter:previous-hunk :which-key "previous hunk"))

)
