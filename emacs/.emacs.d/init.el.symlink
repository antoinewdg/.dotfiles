;; Defaults

(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 0)

(setq visible-bell nil)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(column-number-mode)
(global-display-line-numbers-mode 1)
(dolist (mode-hook '(org-mode-hook term-mode-hook eshell-mode-hook))
  (add-hook mode-hook (lambda () (display-line-numbers-mode 0))))

;; Avoid customize writing in this file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))
(load custom-file)


;; Autosave
(add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
;; Save on buffer switch
(defadvice switch-to-buffer (before save-buffer-now activate)
  (when buffer-file-name (save-buffer)))
;; Save on window move
(defadvice other-window (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-up (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-down (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-left (before other-window-now activate)
  (when buffer-file-name (save-buffer)))
(defadvice windmove-right (before other-window-now activate)
  (when buffer-file-name (save-buffer)))

;; Packages
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(require 'use-package)
(custom-set-variables '(use-package-always-ensure t))

;; General

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package counsel
  :config (counsel-mode))

(use-package ivy-rich
  :config (ivy-rich-mode 1))

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable))

;; Looks

(set-face-attribute 'default nil :font "Iosevka")
(load-theme 'tango-dark)

(use-package doom-themes
  :config
  (load-theme 'doom-material t))

(use-package doom-modeline
  :custom
  (doom-modeline-buffer-modification-icon nil)
  :config (doom-modeline-mode 1))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))



;; Key binding

(use-package general
  :config
  (general-define-key
   :keymaps 'transient-base-map
   "<escape>" 'transient-quit-one)
  (general-define-key
   :states '(normal emacs)		;
   :keymaps 'override
   :prefix "SPC"
   ;; Git
   "g s" 'magit-status
   ;; Project
   "p p" 'projectile-switch-project
   "p f" 'projectile-find-file
   "p s" 'projectile-ripgrep
   "p l" 'projectile-edit-dir-locals
   "p a" 'projectile-add-known-project
   "p D" 'projectile-remove-known-project
   ;; Buffers
   "b f" 'format-all-buffer
   ;; "b f" 'lsp-format-buffer
   "b b" 'toto/switch-buffer-ignore-special
   "b B" 'ivy-switch-buffer
   "b p" 'switch-to-prev-buffer
   "b m" 'toto/open-messages-buffer
   ;; Editor
   "e e" 'toto/reload-init-file
   "e c" 'toto/edit-emacs-config
   ;; Tests
   "t t" 'toto/run-test-at-point
   ;; Windows
   "w h" 'windmove-left
   "w l" 'windmove-right
   "w d" 'toto/delete-window
   "w n" 'toto/split-window-right-and-move
   ;; Code
   "c d" 'lsp-find-definition
   "c r" 'lsp-find-references
   ))



(use-package evil
  :custom
  (evil-want-integration t) ;; This is optional since it's already set to t by default.
  (evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :custom
  (evil-collection-company-use-tng nil)
  :config
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-collection-init))

(use-package evil-nerd-commenter
  :general
  (:keymaps '(normal visual)
	    "g c" 'evilnc-comment-or-uncomment-lines))

(use-package which-key
  :config (which-key-mode))

(use-package magit)

(defun toto/edit-emacs-config ()
  (interactive)
  (find-file (expand-file-name "~/.emacs.d/init.el")))

(defun toto/reload-init-file ()
  (interactive)
  (load user-init-file))

(defun toto/delete-window ()
  (interactive)
  (delete-window)
  (balance-windows))

(defun toto/split-window-right-and-move ()
  (interactive)
  (split-window-right)
  (windmove-right)
  (balance-windows))

(defun toto/open-messages-buffer ()
  (interactive)
  (switch-to-buffer "*Messages*"))

(defun toto/switch-buffer-ignore-special ()
  (interactive)
  (let ((ivy-ignore-buffers (append ivy-ignore-buffers `("^\*"))))
    (ivy-switch-buffer)))

(defun toto/sbt/get-testonly-file (&optional file)
  "Return FILE formatted in a sbt testOnly command."
  (--> (or file (file-name-base))
    (format "testOnly *%s" it)))

(defun toto/sbt/run-test-file (&optional file)
  (interactive)
  (sbt-command (toto/sbt/get-testonly-file file)))

(defun toto/sbt/get-testcase-name ()
  "Get Scala test case nearby point."
  (save-excursion
    (let* ((line (thing-at-point 'line t))
           (on-testcase-p (and (s-contains? "\"" line)
                               (s-contains? "{\n" line)))
           (get-testcase-name (lambda (l)
                                (--> l
                                  (s-split "\"" it)
                                  reverse
				  (cdr it)
				  reverse
				  cdr
				  (string-join it "")))))
      (if on-testcase-p
          (funcall get-testcase-name line)
        (progn
          (search-backward "{\n")
          (funcall get-testcase-name (thing-at-point 'line t)))))))

(defun toto/sbt/run-testcase-at-point ()
  "Run Scala test case at point."
  (interactive)
  (--> (toto/sbt/get-testonly-file)
    (format "%s -- -z \"%s\"" it (toto/sbt/get-testcase-name))
    sbt-command))


(defun toto/run-test-at-point ()
  (interactive)
  (toto/sbt/run-testcase-at-point))



(use-package projectile
  :diminish
  :custom
  (projectile-completion-system 'ivy)
  (projectile-switch-project-action #'projectile-dired)
  (projectile-auto-discover nil)
  (projectile-track-known-projects-automatically nil)
  :config
  (projectile-mode))

(use-package format-all
  :commands format-all-buffer
  :config
  (setq-default format-all-formatters '(("Python" isort black)))
  (define-format-all-formatter isort
    (:executable "isort")
    (:install)
    (:languages "Python")
    (:format (format-all--buffer-easy executable  "-"))))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :custom
  (lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t)
  :hook
  (python-mode . lsp-deferred))

(use-package lsp-pyright
  :defer t
  :custom
  (lsp-pyright-disable-language-service nil)
  (lsp-pyright-disable-organize-imports t)
  (lsp-pyright-auto-import-completions t)
  (lsp-pyright-use-library-code-for-types t)
  ;; (lsp-pyright-venv-path "~/.cache/pypoetry/virtualenvs/querysmith-NuXvAkrf-py3.7")
  :hook
  ((python-mode . (lambda () (require 'lsp-pyright) (lsp-deferred)))))

(use-package pyvenv
  :defer nil)

;; :hook
;; ((python-mode . (lambda () (message lsp-pyright-venv-path)))))


(use-package scala-mode
  :interpreter ("scala" . scala-mode))

(use-package sbt-mode
  :commands sbt-start sbt-command
  :custom
  (sbt:program-options '("-Dsbt.supershell=false")))

(use-package terraform-mode
  :interpreter ("tf" . terraform-mode))

(use-package lsp-metals
  :defer t
  :hook
  ((scala-mode . (lambda () (require 'lsp-metals) (lsp-deferred)))))

(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind
  (:map company-active-map
        ("<tab>" . company-complete-selection)
	("<enter>" . company-complete-selection))
  (:map lsp-mode-map
        ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0)
  (company-selection-default 0))
