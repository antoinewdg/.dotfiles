(defun load-user-file (file)
  (load-file (expand-file-name file user-emacs-directory)))

(load-user-file "setup.el")
(load-user-file "commands.el")
(load-user-file "tototest.el")


;; General

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package counsel
  :config (counsel-mode))

(use-package ivy-rich
  :config (ivy-rich-mode 1))

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable))

;; Looks


(use-package doom-themes
  :config
  (load-theme 'doom-material t))

(use-package doom-modeline
  :custom
  (doom-modeline-buffer-modification-icon nil)
  :config (doom-modeline-mode 1))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))



;; Key binding

(use-package general
  :config
  (general-define-key
   "M-c" 'eval-expression)
  (general-define-key
   :keymaps 'transient-base-map
   "<escape>" 'transient-quit-one)
  (general-define-key
   :states '(normal emacs)		;
   :keymaps 'override
   :prefix "SPC"
   ;; Git
   "g s" 'magit-status
   ;; Project
   "p p" 'projectile-switch-project
   "p f" 'projectile-find-file
   "p s" 'projectile-ripgrep
   "p l" 'projectile-edit-dir-locals
   "p a" 'projectile-add-known-project
   "p D" 'projectile-remove-known-project
   ;; Buffers
   "b k" 'kill-current-buffer
   "b f" 'toto/format-buffer
   "b b" 'toto/switch-buffer-ignore-special
   "b B" 'ivy-switch-buffer
   "b p" 'switch-to-prev-buffer
   "b m" 'toto/open-messages-buffer
   "b D" 'toto/delete-current-file-and-buffer
   ;; Editor
   "e e" 'toto/reload-init-file
   "e c" 'toto/edit-emacs-config
   ;; Tests
   "t t" 'tototest/run-previous-test
   "t p" 'tototest/run-test-case-at-point
   "t c" 'tototest/run-test-class-at-point
   ;; Windows
   "w h" 'windmove-left
   "w l" 'windmove-right
   "w d" 'toto/delete-window
   "w n" 'toto/split-window-right-and-move
   ;; Code
   "c d" 'lsp-find-definition
   "c r" 'lsp-rename
   "c f" 'lsp-find-references
   ))



(use-package evil
  :custom
  (evil-want-integration t) ;; This is optional since it's already set to t by default.
  (evil-want-keybinding nil)
  :config
  (evil-mode 1))

;; Adds evil bindings to popular packages
(use-package evil-collection
  :after evil
  :custom
  (evil-collection-company-use-tng nil)
  :config
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-collection-init))

(use-package evil-nerd-commenter
  :general
  (:keymaps '(normal visual)
	    "g c" 'evilnc-comment-or-uncomment-lines))

;; Display a buffer at the bottom explaining shortcuts
(use-package which-key
  :config (which-key-mode))

(use-package magit)

(use-package projectile
  :diminish
  :custom
  (projectile-completion-system 'ivy)
  ;; (projectile-switch-project-action #'projectile-dired)
  (projectile-auto-discover nil)
  (projectile-track-known-projects-automatically nil)
  :config
  (projectile-mode))

;; Formatting for most languages
(use-package format-all
  :commands (format-all-buffer format-all-ensure-formatter)
  :hook
  ((prog-mode . format-all-ensure-formatter))
  :config
  (setq-default format-all-formatters '(("Python" isort black)))
  (define-format-all-formatter isort
    (:executable "isort")
    (:install)
    (:languages "Python")
    (:format (format-all--buffer-easy executable  "-"))))


(use-package counsel-projectile
  :config (counsel-projectile-mode))



;; ===========
;; Programming
;; ===========

;; Autocomplete widget
(use-package company
  :hook
  ((lsp-mode . company-mode)
   (emacs-lisp-mode . company-mode))
  :bind
  (:map company-active-map
        ("<tab>" . company-complete-selection)
	("<enter>" . company-complete-selection))
  ;; not really sure what this does
  ;; (:map lsp-mode-map
  ;;       ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0)
  (company-selection-default 0))

;; LSP client
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :custom
  (lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t)
  :hook
  (python-mode . lsp-deferred))

;; Python LSP
(use-package lsp-pyright
  :defer t
  :custom
  (lsp-pyright-disable-language-service nil)
  (lsp-pyright-disable-organize-imports t)
  (lsp-pyright-auto-import-completions t)
  (lsp-pyright-use-library-code-for-types t)
  :hook
  ((python-mode . (lambda () (require 'lsp-pyright) (lsp-deferred)))))

;; Allows using venvs
(use-package pyvenv
  :defer nil)

(use-package scala-mode
  :interpreter ("scala" . scala-mode))

(use-package sbt-mode
  :commands sbt-start sbt-command
  :custom
  (sbt:program-options '("-Dsbt.supershell=false")))


(use-package lsp-metals
  :defer t
  :hook
  ((scala-mode . (lambda () (require 'lsp-metals) (lsp-deferred)))))

(use-package terraform-mode
  :interpreter ("tf" . terraform-mode))
